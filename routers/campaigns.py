from fastapi import APIRouter, Depends, HTTPException, UploadFile, File, Form, status
from sqlalchemy.orm import Session
from database.db import get_db
from database.models import Campaign
from schemas import CampaignCreate, CampaignResponse, CampaignData
from typing import List


router = APIRouter(prefix="/campaigns", tags=["Campaigns"])

@router.get("/", response_model=List[CampaignResponse])
def list_campaigns(db: Session = Depends(get_db)):
    return db.query(Campaign).order_by(Campaign.id.desc()).all()

@router.get("/top", response_model=List[CampaignResponse])
def get_top_campaigns(db: Session = Depends(get_db)):
    return db.query(Campaign).order_by(Campaign.last_run_date.desc()).limit(5).all()

@router.post("/", response_model=CampaignResponse)
def create_campaign(payload: CampaignCreate, db: Session = Depends(get_db)):
    new_campaign = Campaign(**payload.model_dump())
    db.add(new_campaign)
    db.commit()
    db.refresh(new_campaign)
    return new_campaign

@router.get("/{campaign_id}", response_model=CampaignResponse)
def get_campaign(campaign_id: int, db: Session = Depends(get_db)):
    campaign = db.query(Campaign).filter(Campaign.id == campaign_id).first()
    if not campaign:
        raise HTTPException(status_code=404, detail="Campaign not found")
    return campaign

@router.delete("/{campaign_id}", status_code=status.HTTP_204_NO_CONTENT)
def delete_campaign(campaign_id: int, db: Session = Depends(get_db)):
    campaign = db.query(Campaign).filter(Campaign.id == campaign_id).first()
    if not campaign:
        raise HTTPException(
            status_code=status.HTTP_404_NOT_FOUND,
            detail="Campaign not found"
        )
    
    db.delete(campaign)
    db.commit()
    return None

@router.post("/upload")
async def upload_file(file: UploadFile = File(...)):
    """Extract text from uploaded file"""
    try:
        from services.campaign_service import process_file_content
        text = await process_file_content(file)
        return {
            "text": text,
            "filename": file.filename,
            "message": "Text extraction completed successfully"
        }
    except Exception as e:
        raise HTTPException(status_code=500, detail=str(e))


from pydantic import BaseModel
from typing import Optional
import logging


import os
import json
from dotenv import load_dotenv
from google import genai
from google.genai import types
from google.genai.types import Part
from fastapi import BackgroundTasks
from typing import List, Optional
import time

load_dotenv()

class CampaignInput(BaseModel):
    id: int  # Add ID field as optional
    title: str
    description: str
    targetCustomer: str
    insight: str

class CampaignRequest(BaseModel):
    campaignInput: CampaignInput



class DescriptionPrompt(BaseModel):
    # Phong c√°ch v√† m·ª•c ti√™u n·ªôi dung
    toneWriting: str                      # V√≠ d·ª•: ·∫•m √°p, chuy√™n nghi·ªáp, h√†i h∆∞·ªõc
    topicStyle: str                       # storytelling, quote, case study
    platforms: List[str]                  # ["Facebook", "TikTok"]
    imageMood: Optional[str]              # V√≠ d·ª•: th∆∞ gi√£n, nƒÉng l∆∞·ª£ng, ·∫•m √°p
    mindset: str                          # h·ªçc h·ªèi, gi·∫£i tr√≠, truy·ªÅn c·∫£m h·ª©ng
    contentObjective: str                 # M·ª•c ti√™u chi·∫øn d·ªãch: b√°n h√†ng, nh·∫≠n di·ªán, k√≠ch ho·∫°t

    # Kh√°ch h√†ng m·ª•c ti√™u
    targetCustomer: str                   # m√¥ t·∫£ ng∆∞·ªùi mua l√Ω t∆∞·ªüng (nh√¢n kh·∫©u h·ªçc + h√†nh vi)
    painPoints: List[str]                # c√°c r√†o c·∫£n / lo l·∫Øng th∆∞·ªùng g·∫∑p
    bigKeywords: List[str]               # t·ª´ kh√≥a s·∫£n ph·∫©m / insight t√¨m ki·∫øm

    # ƒê·ªãnh v·ªã th∆∞∆°ng hi·ªáu
    brandName: Optional[str]             # t√™n th∆∞∆°ng hi·ªáu n·∫øu c√≥
    corePromise: Optional[str]           # L·ªùi h·ª©a th∆∞∆°ng hi·ªáu
    brandManifesto: Optional[str]        # WHY c·∫£m x√∫c
    brandPersona: Optional[str]          # v√≠ d·ª•: ng∆∞·ªùi anh, b·∫°n th√¢n, chuy√™n gia
    keyMessages: List[str]               # Nh·ªØng th√¥ng ƒëi·ªáp ch√≠nh c·∫ßn l·∫∑p l·∫°i
    callsToAction: List[str]             # CTA: mua ngay, chia s·∫ª, comment...

    # Ph√¢n t√≠ch h·ªá th·ªëng
    confidenceScore: int                 # ƒë√°nh gi√° ƒë·ªô ƒë·∫ßy ƒë·ªß input (0-100)

class DescriptionGenerate(BaseModel):
    campaign_meta: DescriptionPrompt



async def generate_campaign_meta(campaign: CampaignInput, db: Session) -> DescriptionGenerate:
    """Generate campaign metadata in background"""
    start_time = time.time()
    client = genai.Client(api_key=os.getenv("GEMINI_API_KEY"))

    print(f"üèÅ Background task b·∫Øt ƒë·∫ßu l√∫c: {time.strftime('%H:%M:%S')}")
    
    print('Generating campaign metadata', campaign.model_dump())
    system_prompt = """
            B·∫°n l√† AI chuy√™n ph√¢n t√≠ch n·ªôi dung t·ª± nhi√™n t·ª´ ng∆∞·ªùi d√πng ƒë·ªÉ ph√¢n lo·∫°i c√°c y·∫øu t·ªë sau cho m·ªôt chi·∫øn d·ªãch marketing.
            H√£y ph√¢n t√≠ch chi·∫øn d·ªãch v√† tr·∫£ v·ªÅ ƒë·ªãnh d·∫°ng JSON nh∆∞ sau:

            {{
            "description": {{
                # Phong c√°ch v√† m·ª•c ti√™u n·ªôi dung
                "toneWriting": "string",           # V√≠ d·ª•: ·∫•m √°p, chuy√™n nghi·ªáp, h√†i h∆∞·ªõc
                "topicStyle": "string",            # storytelling, quote, case study
                "platforms": ["string"],           # ["Facebook", "TikTok"]
                "imageMood": "string",             # V√≠ d·ª•: th∆∞ gi√£n, nƒÉng l∆∞·ª£ng, ·∫•m √°p
                "mindset": "string",               # h·ªçc h·ªèi, gi·∫£i tr√≠, truy·ªÅn c·∫£m h·ª©ng
                "contentObjective": "string",      # M·ª•c ti√™u: b√°n h√†ng, nh·∫≠n di·ªán, k√≠ch ho·∫°t

                # Kh√°ch h√†ng m·ª•c ti√™u
                "targetCustomer": "string",        # m√¥ t·∫£ ng∆∞·ªùi mua l√Ω t∆∞·ªüng
                "painPoints": ["string"],          # c√°c r√†o c·∫£n / lo l·∫Øng th∆∞·ªùng g·∫∑p
                "bigKeywords": ["string"],         # t·ª´ kh√≥a s·∫£n ph·∫©m / insight t√¨m ki·∫øm

                # ƒê·ªãnh v·ªã th∆∞∆°ng hi·ªáu
                "brandName": "string",             # t√™n th∆∞∆°ng hi·ªáu n·∫øu c√≥
                "corePromise": "string",           # L·ªùi h·ª©a th∆∞∆°ng hi·ªáu
                "brandManifesto": "string",        # WHY c·∫£m x√∫c
                "brandPersona": "string",          # v√≠ d·ª•: ng∆∞·ªùi anh, b·∫°n th√¢n, chuy√™n gia
                "keyMessages": ["string"],         # Nh·ªØng th√¥ng ƒëi·ªáp ch√≠nh c·∫ßn l·∫∑p l·∫°i
                "callsToAction": ["string"],       # CTA: mua ngay, chia s·∫ª, comment...

                # Ph√¢n t√≠ch h·ªá th·ªëng
                "confidenceScore": 100             # ƒë√°nh gi√° ƒë·ªô ƒë·∫ßy ƒë·ªß input (0-100)
            }}
            }}

           
            """

    # Use asyncio.create_task to run in true background
    response = await client.aio.models.generate_content(
        # model='gemini-2.0-flash',
        model='gemini-2.5-flash-preview-04-17',
        contents=f"""Ph√¢n t√≠ch th√¥ng tin chi·∫øn d·ªãch ƒë·ªÉ x√°c ƒë·ªãnh c√°c y·∫øu t·ªë description prompt.  Ti√™u ƒë·ªÅ: {campaign.title}
            M√¥ t·∫£: {campaign.description}
            ƒê·ªëi t∆∞·ª£ng: {campaign.targetCustomer}
            Insight: {campaign.insight}""",
        config=types.GenerateContentConfig(
            response_mime_type='application/json',
            response_schema=DescriptionGenerate,
            system_instruction=Part(text=system_prompt)
        )
    )

    print("‚úÖ ƒê√£ ph√¢n t√≠ch th√¥ng tin chi·∫øn d·ªãch.")
    content = json.loads(response.text)
    
    if campaign.id:
        # Update existing campaign
        existing_campaign = db.query(Campaign).filter(Campaign.id == campaign.id).first()
        if existing_campaign:
            existing_campaign.campaign_data = content
            existing_campaign.title = campaign.title
            existing_campaign.description = campaign.description
            existing_campaign.target_customer = campaign.targetCustomer
            existing_campaign.insight = campaign.insight
            db.commit()
            print(f"‚úÖ ƒê√£ c·∫≠p nh·∫≠t campaign data cho chi·∫øn d·ªãch ID {campaign.id}")
            return DescriptionGenerate(**content)
    
    # # Create new campaign if no ID or campaign not found
    # new_campaign = Campaign(
    #     title=campaign.title,
    #     description=campaign.description,
    #     target_customer=campaign.targetCustomer,
    #     insight=campaign.insight,
    #     campaign_data=content,
    #     repeat_every_days=7,
    #     current_step=1
    # )
    
    # db.add(new_campaign)
    # db.commit()
    # db.refresh(new_campaign)
    
    print(f"‚úÖ ƒê√£ l∆∞u campaign data m·ªõi cho chi·∫øn d·ªãch: {campaign.title}")

    return DescriptionGenerate(**content)

@router.post("/gen_campaign_system")
async def generate_campaign_system(req: CampaignRequest, db: Session = Depends(get_db)):
    import asyncio
    
    start_time = time.time()
    campaign = req.campaignInput
    print(campaign.model_dump())
    try:
        # Create a true background task using asyncio
        task = asyncio.create_task(generate_campaign_meta(campaign, db))
        
        end_time = time.time()
        route_execution_time = end_time - start_time
        
        return {
            "message": "Campaign analysis started in background",
            "campaign": campaign.model_dump(),
            "status": "processing",
            "route_execution_time": f"{route_execution_time:.2f} seconds"
        }

    except Exception as e:
        logging.exception("‚ùå Error generating campaign system prompt")
        raise HTTPException(status_code=500, detail=str(e))

