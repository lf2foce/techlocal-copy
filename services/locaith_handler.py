import urllib.parse
import logging
import requests
from typing import Optional

async def generate_and_upload_locaith(prompt: str, width: int = 576, height: int = 1024) -> Optional[str]:
    """T·∫°o v√† tr·∫£ v·ªÅ URL ·∫£nh t·ª´ Pollinations API.
    
    Args:
        prompt (str): Prompt ƒë·ªÉ t·∫°o ·∫£nh
        
    Returns:
        Optional[str]: URL c·ªßa ·∫£nh ƒë√£ t·∫°o ho·∫∑c None n·∫øu c√≥ l·ªói
    """
    try:
        # Gi·ªõi h·∫°n ƒë·ªô d√†i prompt v√† m√£ h√≥a
        safe_prompt = prompt[:500]
        encoded_prompt = urllib.parse.quote(safe_prompt)

        # T·∫°o URL ·∫£nh v·ªõi custom dimensions
        image_url = f"https://image.pollinations.ai/prompt/{encoded_prompt}?nologo=true&width={width}&height={height}"
        logging.info(f"üñºÔ∏è [Locaith] ·∫¢nh ƒë√£ s·∫µn s√†ng: '{safe_prompt[:60]}...'")
        logging.info(f"üîó URL ·∫£nh: {image_url}")
        # Shorten URL using TinyURL API
        try:
            tiny_url_api = f"http://tinyurl.com/api-create.php?url={urllib.parse.quote(image_url)}"
            response = requests.get(tiny_url_api)
            if response.status_code == 200:
                short_url = response.text
                logging.info(f"üñºÔ∏è [Locaith] ·∫¢nh ƒë√£ s·∫µn s√†ng: '{safe_prompt[:60]}...'")
                logging.info(f"üîó URL ·∫£nh (shortened): {short_url}")
                return short_url
            else:
                logging.warning(f"‚ö†Ô∏è [Locaith] Could not shorten URL, returning original")
                return image_url
        except Exception as e:
            logging.warning(f"‚ö†Ô∏è [Locaith] URL shortening failed: {e}, returning original")
            return image_url

    except Exception as e:
        logging.error(f"‚ùå [Locaith ERROR] L·ªói kh√¥ng x√°c ƒë·ªãnh: {e}")
        return None